// <auto-generated />
using System;
using DrGreiche.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DrGreiche.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DrGreiche.Models.Location", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentLocationID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ParentLocationID");

                    b.ToTable("locations");
                });

            modelBuilder.Entity("DrGreiche.Models.Machine", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("MachineCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MachineName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Purpose_MTBF")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Purpose_MTTR")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("machines");
                });

            modelBuilder.Entity("DrGreiche.Models.MachineLocation", b =>
                {
                    b.Property<int>("MachineLocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MachineLocationID"));

                    b.Property<DateTime>("LastMaintenanceDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LocationID")
                        .HasColumnType("int");

                    b.Property<int>("MachineID")
                        .HasColumnType("int");

                    b.Property<DateTime>("NextMaintenanceDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("WorkingHours")
                        .HasColumnType("float");

                    b.HasKey("MachineLocationID");

                    b.HasIndex("LocationID");

                    b.HasIndex("MachineID");

                    b.ToTable("machineLocation");
                });

            modelBuilder.Entity("DrGreiche.Models.Location", b =>
                {
                    b.HasOne("DrGreiche.Models.Location", "ParentLocation")
                        .WithMany("SubLocations")
                        .HasForeignKey("ParentLocationID");

                    b.Navigation("ParentLocation");
                });

            modelBuilder.Entity("DrGreiche.Models.MachineLocation", b =>
                {
                    b.HasOne("DrGreiche.Models.Location", "Location")
                        .WithMany("MachineLocations")
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrGreiche.Models.Machine", "Machine")
                        .WithMany("MachineLocations")
                        .HasForeignKey("MachineID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Machine");
                });

            modelBuilder.Entity("DrGreiche.Models.Location", b =>
                {
                    b.Navigation("MachineLocations");

                    b.Navigation("SubLocations");
                });

            modelBuilder.Entity("DrGreiche.Models.Machine", b =>
                {
                    b.Navigation("MachineLocations");
                });
#pragma warning restore 612, 618
        }
    }
}
